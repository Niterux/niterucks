plugins {
	id 'java'
	id 'maven-publish'
	id 'fabric-loom' version '1.11-SNAPSHOT' apply false
	id 'ploceus' version '1.11-SNAPSHOT' apply false
}

def configure(project) {
	project.apply plugin: 'java'
	project.apply plugin: 'maven-publish'
	project.apply plugin: 'fabric-loom'
	project.apply plugin: 'ploceus'

	project.base {
		archivesName = "${project.rootProject.archives_base_name}"
	}
	project.version = "${project.rootProject.version}"
	project.maven_group = project.rootProject.maven_group

	project.loom {
		clientOnlyMinecraftJar()
	}

	project.ploceus {
		clientOnlyMappings()
	}

	project.repositories {
		maven { url = "https://moehreag.duckdns.org/maven/releases" }
		mavenCentral()
		maven { url = "https://jitpack.io" }
	}

	project.dependencies {
		minecraft "com.mojang:minecraft:${project.rootProject.minecraft_version}"
		mappings project.ploceus.featherMappings(project.feather_build)
		exceptions project.ploceus.raven(project.raven_build) // remove this line if not using exceptions patches
		signatures project.ploceus.sparrow(project.sparrow_build) // remove this line if not using generics patches
		nests project.ploceus.nests(project.nests_build) // remove this line if not using inner class patches

		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
		modImplementation "net.fabricmc:fabric-language-kotlin:1.13.4+kotlin.2.2.0"

		modImplementation "com.terraformersmc:modmenu:0.3.1+mcb1.7.3"
		include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.3.3")))
		modImplementation include("io.github.axolotlclient.extra:AxolotlClient-config:0.0.2+b1.7.3")
		include("io.github.axolotlclient.AxolotlClient-config:AxolotlClientConfig-common:3.0.13")
		include(implementation("dev.kdrag0n:colorkt-jvm:1.0.5"))
		project.ploceus.dependOsl(project.osl_version, project.environment)
	}

	project.sourceSets {
		client {
			java {
				srcDirs += project.rootProject.sourceSets.client.java.srcDirs
			}
			resources {
				srcDirs += project.rootProject.sourceSets.client.resources.srcDirs
			}
		}
	}

	project.processResources {
		filesMatching('fabric.mod.json') {
			expand project.properties
		}
	}

	project.tasks.withType(JavaCompile).configureEach {
		it.options.encoding = 'UTF-8'
		it.options.release = 17
	}

	project.java {
		// Still required by IDEs such as Eclipse and Visual Studio Code
		sourceCompatibility = JavaVersion.VERSION_17
		targetCompatibility = JavaVersion.VERSION_17

		// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
		// If you remove this line, sources will not be generated.
		withSourcesJar()

		// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
		// Uncomment this line to generate them.
		 withJavadocJar()
	}

	// If you plan to use a different file for the license, don't forget to change the file name here!
	project.jar {
		from('LICENSE') {
			rename { "${it}_${project.base.archivesName.get()}" }
		}
	}

	// Configure the maven publication
	project.publishing {
		publications {
			mavenJava(MavenPublication) {
				from project.components.java
			}
		}

		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		repositories {
			// Add repositories to publish to here.
			// Notice: This block does NOT have the same function as the block in the top level.
			// The repositories here will be used for publishing your artifact, not for
			// retrieving dependencies.
		}
	}
}
configure(project)
