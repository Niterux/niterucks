plugins {
	id 'java'
	id 'maven-publish'
	id 'fabric-loom' version '1.5-SNAPSHOT'
	id 'ploceus' version '1.5-SNAPSHOT'
}


base {
	archivesName = "${project.archives_base_name}-${project.environment}"
}
version = "${project.version}"
group = project.maven_group

project.repositories {
	maven { url = "https://jitpack.io" }
	maven { url = "https://moehreag.duckdns.org/maven/snapshots" }
}

project.dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings project.loom.layered {
		mappings "net.ornithemc:feather:${project.minecraft_version}-${project.environment}+build.${project.feather_build}:v2"
		addLayer project.ploceus.nestedMappings()
	}
	nests "net.ornithemc:nests:${project.minecraft_version}-${project.environment}+build.${project.nests_build}"

	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "com.terraformersmc:modmenu:0.2.0+mcb1.7.3"
	include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.1.1")))
	modImplementation include("io.github.axolotlclient.extra:AxolotlClient-config:0.0.1-beta.1+b1.7.3")
	include("io.github.axolotlclient.AxolotlClient-config:AxolotlClientConfig-common:3.0.0-beta.38")
	project.ploceus.addCommonLibraries()
	project.ploceus.dependOsl(project.osl_version, project.environment)
}


processResources {
	filesMatching('fabric.mod.json') {
		expand project.properties
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.encoding = 'UTF-8'
	it.options.release = 8
}

java {
	// Still required by IDEs such as Eclipse and Visual Studio Code
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	// If this mod is going to be a library, then it should also generate Javadocs in order to aid with development.
	// Uncomment this line to generate them.
	// withJavadocJar()
}

// If you plan to use a different file for the license, don't forget to change the file name here!
jar {
	from('LICENSE') {
		rename { "${it}_${project.base.archivesName.get()}" }
	}
}

// Configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from project.components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

loom {
	clientOnlyMinecraftJar()
}

ploceus {
	clientOnlyMappings()
}
